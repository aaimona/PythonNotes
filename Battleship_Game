# This is the game Battleship which i wrote during Codecademy's course on Python. 5 x 5 board with one single battleship
# to be discovered and sunk. I'm so proud of myself, even though i was given precise instructions during the whole module :)

from random import randint

board = [] # starting board is an empty list to which i will append rows filled with letters 'o'

for x in range(5):
    board.append(["O"] * 5) # creates a board by appending 5 rows, 5 o's in each

def print_board(board):
    for row in board:
        print " ".join(row) # i use .join() method so that my board looks like 25 regular o's, with no quotation marks

print "Let's play Battleship!"
print_board(board)

def random_row(board):
    return randint(0, len(board) - 1) # remember - in Python we start our counting from 0, hence len(board) - 1

def random_col(board):
    return randint(0, len(board[0]) - 1)

ship_row = random_row(board)
ship_col = random_col(board)
print ship_row # this line should be removed before the actual play since it gives away the location of the battleship
print ship_col # this line should be removed before the actual play since it gives away the location of the battleship


for turn in range(4): # i only give my player 4 turns to locate and sink the ship
    print "Turn", turn + 1 # so that the player knows which turn s/he is in 
    guess_row = int(raw_input("Guess Row:"))
    guess_col = int(raw_input("Guess Col:"))

    if guess_row == ship_row and guess_col == ship_col:
        print "Congratulations! You sunk my battleship!"
        break
    else:
        if (guess_row < 0 or guess_row > 4) or (guess_col < 0 or guess_col > 4):
            print "Oops, that's not even in the ocean."
        elif(board[guess_row][guess_col] == "X"):
            print "You guessed that one already."
        else:
            print "You missed my battleship!"
            board[guess_row][guess_col] = "X" # i mark the guessed spot so that the player can see it on the board
    if turn == 3:
        print "Game Over"

    print_board(board) # i show the board's status quo

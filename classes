# creating classes - not as easy as it seems!
class Animal(object): # introductory phrase, a signal for Python that i want to create a new class. NB capital letter in Animal
    """Makes cute animals.""" # just a few words of comment
    is_alive = True # a function that will be available to all instances of this new Class
    def __init__(self, name, age): 
# __init__ initializes or boots new class. it needs to be given some arguments. first and the most important is "self",
# which is this new class itself - Python needs to something to hold on to for the rest of the process of creating this
# new class.
        self.name = name
        self.age = age # these are called METHODS and they should correspond with the list in __init__()
    def description(self): # i can add my own method
        print self.name
        print self.age

hippo = Animal("Zenek", "3")
print hippo.description() 
# i call this new method i've added by calling object_name.description(). Actually, i can call this method without parentheses
# at the end since the description() function takes no arguments and it only needs me to specify which object of this new class
# i'm interested in. Hence, hippo.description.

# i need to add "self" as first argument IN ALL METHODS that i create in this newly created class. The syntax needs it to know 
# what to refer to. Even if i create a function that will take no argument, in the method definition I HAVE TO ADD "SELF".

# this is a nice real-life example of class creation: shopping cart in an online shop:
class ShoppingCart(object):
    """Creates shopping cart objects
    for users of our fine website."""
    items_in_cart = {}
    def __init__(self, customer_name):
        self.customer_name = customer_name

    def add_item(self, product, price):
        """Add product to the cart."""
        if not product in self.items_in_cart:
            self.items_in_cart[product] = price
            print product + " added."
        else:
            print product + " is already in the cart."

    def remove_item(self, product):
        """Remove product from the cart."""
        if product in self.items_in_cart:
            del self.items_in_cart[product]
            print product + " removed."
        else:
            print product + " is not in the cart."
    
my_cart = ShoppingCart("Kasia")
my_cart.add_item("wallet", 45.50)

# INHERITANCE
# Inheritance is the process by which one class takes on the attributes and methods of another, and it's used
# to express an is-a relationship. For example, a Panda is a bear, so a Panda class could inherit from a Bear class.
# However, a Toyota is not a Tractor, so it shouldn't inherit from the Tractor class (even if they have a lot of attributes
# and methods in common). Instead, both Toyota and Tractor could ultimately inherit from the same Vehicle class.
# We've defined a class, Customer, as well as a ReturningCustomer class that inherits from Customer. Note that we don't
# define the display_cart method in the body of ReturningCustomer, but it will still have access to that method
# via inheritance.
class Customer(object):
    """Produces objects that represent customers."""
    def __init__(self, customer_id):
        self.customer_id = customer_id

    def display_cart(self):
        print "I'm a string that stands in for the contents of your shopping cart!"

class ReturningCustomer(Customer): # here i say that ReturningCustomer inherits from Customer (Customer in parentheses)
    """For customers of the repeat variety."""
    def display_order_history(self):
        print "I'm a string that stands in for your order history!"

monty_python = ReturningCustomer("ID: 12345")
monty_python.display_cart()
monty_python.display_order_history()

# Another example of inheritance:
class Shape(object):
    """Makes shapes!"""
    def __init__(self, number_of_sides):
        self.number_of_sides = number_of_sides

# here i'm adding new class, Triangle, that inherits from Shape class
class Triangle(Shape):
    def __init__(self, side1, side2, side3):
        self.side1 = side1
        self.side2 = side2
        self.side3 = side3

# Override methods
class Employee(object):
    """Models real-life employees!"""
    def __init__(self, employee_name):
        self.employee_name = employee_name

    def calculate_wage(self, hours):
        self.hours = hours
        return hours * 20.00
        
class PartTimeEmployee(Employee):
    def calculate_wage(self, hours): # i'm overriding Employee calculate_wage method that this class inherits from
        self.hours = hours
        return hours * 12.00

# Accessing a method available in parent class
class Employee(object):
    """Models real-life employees!"""
    def __init__(self, employee_name):
        self.employee_name = employee_name

    def calculate_wage(self, hours):
        self.hours = hours
        return hours * 20.00

class PartTimeEmployee(Employee): # creating a derived class that inherits from Employee class
    def calculate_wage(self, hours):
        self.hours = hours
        return hours * 12.00
    
    def full_time_wage(self, hours):
        self.hours = hours
        return super(PartTimeEmployee, self).calculate_wage(hours)
        # Syntax is as follows:
        # super(Derived, self).method()

milton = PartTimeEmployee("Zenek")
print milton.full_time_wage(10)
# the last phrase will calculate the value of Zenek's job as if he was full time employee with $20/hour rate

# 
class Triangle(object):
    def __init__(self, angle1, angle2, angle3):
        self.angle1 = angle1
        self.angle2 = angle2
        self.angle3 = angle3
    
    number_of_sides = 3
    
    def check_angles(self):
    # just one argument, "self". i don't need to define 3 angles here because when i create an instance of the Triangle
    # class, i pass those angles as its properties. when i call check_angles() method on this instance, the method will
    # already know which angles to check. Hence, self.angle1 + self.angle2 + self.angle3 below, instead of just 
    # angle1 + angle2 + angle3, which would look like an ordinary function to check sum of angles
        if self.angle1 + self.angle2 + self.angle3 == 180:
            return True
        else:
            return False
